@using ASF.Entities
@using ASF.UI.Process
@model ASF.Entities.Dealer

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Dealer</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*@Html.HiddenFor(model => model.Id)*@
        <input type="hidden" value="@Model.Id" name="Id" />
      

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.TotalProducts, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalProducts, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalProducts, "", new { @class = "text-danger" })
            </div>
        </div>*@
        
        @{
            List<SelectListItem> listItemscountry = new ProcessComponent<Country>()
                .SelectList().Select(c => new SelectListItem() { Value = c.Id.ToString(), Text = c.Name })
                .ToList();
        }


        <div class="form-group">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CountryId,
                    listItemscountry,
                    "País")
            </div>
        </div>


        @{
            List<SelectListItem> listItemsCategory = new ProcessComponent<Category>()
                .SelectList().Select(c => new SelectListItem() { Value = c.Id.ToString(), Text = c.Name })
                .ToList();
        }


        <div class="form-group">
            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CategoryId,
                    listItemsCategory,
                    "Categoria")
            </div>
        </div>
        

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@{

    var listaproductos = new ProcessComponent<Product>().SelectList("rest/Product/ProductXDealer", Model.Id);
    TempData["DealerId"] = Model.Id;

}

@Html.Partial("_ListProducts", listaproductos);


<div>
    @Html.ActionLink("Back to List", "Index")
</div>
